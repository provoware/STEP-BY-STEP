JSON-UND-MEHR SAMMLUNG
======================

Dieser Ordner ersetzt die frühere ZIP-Datei und fasst alle Basisdateien
als sofort lesbare Textübersicht zusammen. Die aufgelisteten Dateien werden
beim Start automatisch geprüft und bei Bedarf repariert oder neu erzeugt.

Enthaltene Kernressourcen
------------------------
- data/settings.json: Nutzer-Voreinstellungen (z.B. Schriftgröße 120 %,
  Farbmodus, Audiolautstärke).
- data/todo_items.json: Aufgabenlisten mit Datum und Status.
- data/playlists.json: Audioplaylist mit Titeln und Quellen.
- data/archive.json: Ablage für erledigte Einträge.
- data/persistent_notes.txt: Notizblock mit Autospeicher.
- data/usage_stats.json: Nutzungsstatistiken, Sitzungszähler.
- data/selftest_report.json: Ergebnisse der automatischen Startroutine
  (Selbsttests, Reparaturen, Paket-Installationen, Datensicherheit) für die
  UI-Anzeige.
- data/release_checklist.json: Fortschritt der Release-Checkliste.
- data/security_manifest.json: Checksummen und Prüfzeitpunkt aller wichtigen
  JSON/TXT-Dateien.
- data/backups/: Sicherungskopien mit Zeitstempel, wenn das Manifest Abweichungen
  feststellt.
- data/converted_audio/: automatisch erzeugte WAV-Kopien (16-Bit).
- data/exports/: Archiv-Exporte im CSV- und JSON-Format.

So wird alles repariert
-----------------------
1. Starte das Klick-und-Start-Tool: ``python start_tool.py``.
2. Das Tool legt automatisch eine virtuelle Umgebung ``.venv`` an.
3. Danach installiert es alle Pakete aus ``requirements.txt``.
4. Anschließend laufen automatische Selbsttests (Syntax-Check und
   Einstellungen). Ergebnisse stehen in ``logs/startup.log``.
5. Fehlt eine Datei, legt das Tool sie mit sinnvollen Standardwerten an.
6. In der Oberfläche stehen ein Zoom-Regler (Schrift 80–160 %), eine dauerhafte
   120 %-Basisschrift, ein ToDo-Kontrollfeld zum direkten Abhaken, ein
   Kontrast-Checker samt Farbpaletten-Tabelle und ein Sicherheits-Tab bereit,
   damit alles sichtbar und nachvollziehbar bleibt.

Zusatzbefehle für die Wartung
------------------------------
- Virtuelle Umgebung manuell aktivieren (Linux/macOS): ``source .venv/bin/activate``.
- Virtuelle Umgebung manuell aktivieren (Windows): ``.venv\\Scripts\\activate``.
- Abhängigkeiten nachinstallieren: ``python -m pip install -r requirements.txt``.
- Audiowiedergabe prüfen: ``python -m pip install simpleaudio``.
- Tool im Diagnosemodus starten: ``python start_tool.py --headless``.
- Selbsttest-Report ansehen: ``less data/selftest_report.json``.
- Sicherheitsmanifest kontrollieren: ``less data/security_manifest.json``.
- Backups listen: ``ls data/backups``.
- Release-Checkliste ansehen: ``less data/release_checklist.json``.
- Archiv-Exporte listen: ``ls data/exports``.
- Konvertierte WAV-Dateien anzeigen: ``ls data/converted_audio``.

Alle Schritte werden mit aussagekräftigen Logs unter ``logs/`` dokumentiert.
